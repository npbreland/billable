#!/usr/bin/env python3
import sqlite3
import sys
import os
from datetime import datetime
from pathlib import Path

DB_PATH = Path.home() / '.billable_hours.db'

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS clients
                 (id INTEGER PRIMARY KEY, name TEXT UNIQUE)''')
    c.execute('''CREATE TABLE IF NOT EXISTS periods
                 (id INTEGER PRIMARY KEY, client_id INTEGER, 
                  start_time TEXT, end_time TEXT,
                  FOREIGN KEY(client_id) REFERENCES clients(id))''')
    c.execute('''CREATE TABLE IF NOT EXISTS sessions
                 (id INTEGER PRIMARY KEY, period_id INTEGER,
                  start_time TEXT, end_time TEXT,
                  FOREIGN KEY(period_id) REFERENCES periods(id))''')
    conn.commit()
    conn.close()

def add_client(name):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO clients (name) VALUES (?)", (name,))
        conn.commit()
        print(f"✓ Client '{name}' added")
    except sqlite3.IntegrityError:
        print(f"✗ Client '{name}' already exists")
    conn.close()

def list_clients():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT id, name FROM clients ORDER BY name")
    clients = c.fetchall()
    conn.close()
    
    if not clients:
        print("No clients found. Add one with: billable add <client_name>")
        return
    
    print("\nClients:")
    for cid, name in clients:
        print(f"  {cid}. {name}")
    print()

def start_period(client_name):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    c.execute("SELECT id FROM clients WHERE name = ?", (client_name,))
    client = c.fetchone()
    
    if not client:
        print(f"✗ Client '{client_name}' not found")
        conn.close()
        return
    
    client_id = client[0]
    
    # Check for active period
    c.execute("""SELECT id FROM periods 
                 WHERE client_id = ? AND end_time IS NULL""", (client_id,))
    if c.fetchone():
        print(f"✗ Client '{client_name}' already has an active billing period")
        conn.close()
        return
    
    now = datetime.now().isoformat()
    c.execute("INSERT INTO periods (client_id, start_time) VALUES (?, ?)", 
              (client_id, now))
    conn.commit()
    print(f"✓ Started billing period for '{client_name}'")
    conn.close()

def toggle_session(client_name):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    c.execute("SELECT id FROM clients WHERE name = ?", (client_name,))
    client = c.fetchone()
    
    if not client:
        print(f"✗ Client '{client_name}' not found")
        conn.close()
        return
    
    client_id = client[0]
    
    # Get active period
    c.execute("""SELECT id FROM periods 
                 WHERE client_id = ? AND end_time IS NULL""", (client_id,))
    period = c.fetchone()
    
    if not period:
        print(f"✗ No active billing period for '{client_name}'")
        conn.close()
        return
    
    period_id = period[0]
    
    # Check for active session
    c.execute("""SELECT id FROM sessions 
                 WHERE period_id = ? AND end_time IS NULL""", (period_id,))
    active_session = c.fetchone()
    
    now = datetime.now().isoformat()
    
    if active_session:
        # Pause - end the current session
        c.execute("UPDATE sessions SET end_time = ? WHERE id = ?", 
                  (now, active_session[0]))
        conn.commit()
        print(f"⏸  Paused timer for '{client_name}'")
    else:
        # Start - create new session
        c.execute("INSERT INTO sessions (period_id, start_time) VALUES (?, ?)", 
                  (period_id, now))
        conn.commit()
        print(f"▶  Started timer for '{client_name}'")
    
    conn.close()

def end_period(client_name):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    c.execute("SELECT id FROM clients WHERE name = ?", (client_name,))
    client = c.fetchone()
    
    if not client:
        print(f"✗ Client '{client_name}' not found")
        conn.close()
        return
    
    client_id = client[0]
    
    # Get active period
    c.execute("""SELECT id FROM periods 
                 WHERE client_id = ? AND end_time IS NULL""", (client_id,))
    period = c.fetchone()
    
    if not period:
        print(f"✗ No active billing period for '{client_name}'")
        conn.close()
        return
    
    period_id = period[0]
    
    # End any active session
    now = datetime.now().isoformat()
    c.execute("""UPDATE sessions SET end_time = ? 
                 WHERE period_id = ? AND end_time IS NULL""", (now, period_id))
    
    # End the period
    c.execute("UPDATE periods SET end_time = ? WHERE id = ?", (now, period_id))
    conn.commit()
    print(f"✓ Ended billing period for '{client_name}'")
    conn.close()

def calculate_hours(start, end):
    start_dt = datetime.fromisoformat(start)
    end_dt = datetime.fromisoformat(end)
    return (end_dt - start_dt).total_seconds() / 3600

def list_hours():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    c.execute("""
        SELECT c.name, p.id, p.start_time, p.end_time
        FROM clients c
        LEFT JOIN periods p ON c.id = p.client_id
        ORDER BY c.name, p.start_time
    """)
    
    periods = c.fetchall()
    
    client_totals = {}
    current_client = None
    
    for client_name, period_id, start, end in periods:
        if client_name not in client_totals:
            client_totals[client_name] = {'total': 0, 'periods': []}
        
        if period_id is None:
            continue
        
        # Calculate hours for this period
        c.execute("""
            SELECT start_time, end_time FROM sessions
            WHERE period_id = ? AND end_time IS NOT NULL
            ORDER BY start_time
        """, (period_id,))
        
        sessions = c.fetchall()
        period_hours = sum(calculate_hours(s[0], s[1]) for s in sessions)
        
        status = "Completed" if end else "Active"
        client_totals[client_name]['periods'].append({
            'id': period_id,
            'start': start,
            'end': end,
            'hours': period_hours,
            'status': status
        })
        client_totals[client_name]['total'] += period_hours
    
    conn.close()
    
    if not client_totals:
        print("No billing data found")
        return
    
    print("\n" + "="*60)
    for client, data in sorted(client_totals.items()):
        print(f"\n{client}")
        print("-" * 60)
        
        if not data['periods']:
            print("  No billing periods")
        else:
            for period in data['periods']:
                start_date = datetime.fromisoformat(period['start']).strftime('%Y-%m-%d %H:%M')
                print(f"  Period #{period['id']} - {period['status']}")
                print(f"    Started: {start_date}")
                print(f"    Hours: {period['hours']:.2f}")
        
        print(f"\n  TOTAL: {data['total']:.2f} hours")
    print("="*60 + "\n")

def show_usage():
    print("""
Billable Hours Tracker

Usage:
  billable add <client>          Add a new client
  billable clients               List all clients
  billable start <client>        Start a billing period for a client
  billable toggle <client>       Start/pause timer (press Enter)
  billable end <client>          End the billing period
  billable list                  Show hours for all clients
  billable help                  Show this help message

Quick workflow:
  1. billable add "Acme Corp"
  2. billable start "Acme Corp"
  3. billable toggle "Acme Corp"  # Start timer
  4. billable toggle "Acme Corp"  # Pause timer
  5. billable toggle "Acme Corp"  # Resume timer
  6. billable end "Acme Corp"
  7. billable list
""")

def main():
    init_db()
    
    if len(sys.argv) < 2:
        show_usage()
        return
    
    command = sys.argv[1].lower()
    
    if command == 'add' and len(sys.argv) == 3:
        add_client(sys.argv[2])
    elif command == 'clients':
        list_clients()
    elif command == 'start' and len(sys.argv) == 3:
        start_period(sys.argv[2])
    elif command == 'toggle' and len(sys.argv) == 3:
        toggle_session(sys.argv[2])
    elif command == 'end' and len(sys.argv) == 3:
        end_period(sys.argv[2])
    elif command == 'list':
        list_hours()
    elif command == 'help':
        show_usage()
    else:
        show_usage()

if __name__ == '__main__':
    main()
